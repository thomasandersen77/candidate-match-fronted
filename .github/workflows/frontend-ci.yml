# .github/workflows/frontend-ci.yml
name: Frontend CI
permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # JOB 1: Build and test the application on every push/PR
  build:
    name: Build and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Build application
        run: npm run build

  # JOB 2: Perform Gemini review ONLY on pull requests
  gemini-pull-request-review:
    name: Gemini PR Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' # Only run on PRs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Perform Code Review with Gemini
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # The logic for calling Gemini API via curl
          # This part does not use 'run-gcloud'
          PROMPT_TEMPLATE=$(cat .github/prompts/pr_review_prompt.txt)
          CODE_DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }} HEAD)
          FULL_PROMPT="${PROMPT_TEMPLATE//\{diff\}/$CODE_DIFF}"
          JSON_PAYLOAD=$(jq -n --arg text_content "$FULL_PROMPT" \
            '{contents: [{parts: [{text: $text_content}]}]}')
          HTTP_RESPONSE=$(curl -s -w "%{http_code}" -X POST \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=$GEMINI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")
          # ... rest of the script ...
          HTTP_STATUS_CODE=${HTTP_RESPONSE: -3}
          if [ "$HTTP_STATUS_CODE" -ne 200 ]; then
             echo "::error::Gemini API call failed with status $HTTP_STATUS_CODE"
             exit 1
          fi
          GEMINI_RESPONSE=${HTTP_RESPONSE:0:${#HTTP_RESPONSE}-3}
          echo "$GEMINI_RESPONSE" | jq -r '.candidates[0].content.parts[0].text' > gemini_review.txt

      - name: Comment on Pull Request
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('gemini_review.txt', 'utf8');
            if (review) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `### ðŸ¤– Gemini Code Review\n\n${review}`
              });
            }